#!/usr/bin/env node

import {logWarning} from "@mnemotix/synaptix.js";
import {graphqlSync} from "graphql";
import fs from "fs";
import path from "path";
import {generateDataModel} from "../../datamodel/generateDataModel";

let extraDataModels = [];

if (!process.argv[2]) {
  logWarning("You don't pass specific dataModel file location, generated fragment types will just match weever core embeded datamodel");
} else {
  const dataModelLocation = path.resolve(process.cwd(), process.argv[2]);

  if (fs.existsSync(dataModelLocation)) {
    const {dataModel} = require(dataModelLocation);

    if (dataModel) {
      extraDataModels.push(dataModel);
    }
  } else {
    throw `${dataModelLocation} is not an existing file...`
  }
}

let introspectionQuery = `
{
  __schema {
    types {
      kind
      name
      possibleTypes {
        name
      }
    }
  }
}`;


let schema = generateDataModel({extraDataModels}).generateExecutableSchema();
let result = graphqlSync(schema, introspectionQuery);
let targetDir = path.resolve(process.cwd(), './src/client/gql');

if (!fs.existsSync(targetDir)) {
  fs.mkdirSync(targetDir);
}

// here we're filtering out any type information unrelated to unions or interfaces
let filteredData = result.data.__schema.types.filter(
  type => type.possibleTypes !== null,
);
result.data.__schema.types = filteredData;

let output = `
/**
 * !!! DON'T MODIFY THIS FILE !!!
 * It was generated by the script :
 *
 * \`npx gql-fragments ./src/server/datamodel/dataModel.js\`
 * 
 * Or :
 *
 * \`node ./node_modules/@mnemotix/weever-core/bin/generateGqlFragments.js ./src/server/datamodel/dataModel.js\`
 *
 *
 * You may experiment that following error if you work with \`yarn link @mnemotix/weever-core\` in dev.
 *
 * "Cannot use GraphQLScalarType "Float" from another module or realm."
 *
 * See that solution to workarround : https://stackoverflow.com/questions/62356525/yarn-link-importing-graphql-js-project-into-another-graphql-js-project-showing
 */

export const gqlFragments = ${JSON.stringify(result.data, null, 2)};
`;

fs.writeFile(path.resolve(targetDir, 'gqlFragments.js'), output, err => {
  if (err) {
    console.error('Error writing GraphQL fragments file...', err);
  } else {
    console.log('GraphQL fragments successfully extracted!');
  }
});
